<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Product List with Category Filter</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 p-6">

  <!-- Header -->
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold">Products</h1>
    <div class="space-x-2">
      <button id="openProductModal" class="bg-blue-600 text-white px-4 py-2 rounded-xl hover:bg-blue-700">Add Product</button>
      <button id="openCategoryModal" class="border px-4 py-2 rounded-xl hover:bg-gray-100">Add Category</button>
    </div>
  </div>

  <!-- Filter -->
  <div class="mb-4">
    <label class="block mb-1 font-medium">Filter by Category</label>
    <select id="categoryFilter" class="border px-3 py-2 rounded-lg w-60">
      <option value="all">All Categories</option>
    </select>
  </div>

  <!-- Table -->
  <div class="bg-white shadow-lg rounded-2xl overflow-x-auto">
    <table class="w-full border-collapse">
      <thead>
        <tr class="bg-gray-100 text-left">
          <th class="p-3 border">ProductId</th>
          <th class="p-3 border">ProductName</th>
          <th class="p-3 border">CategoryName</th>
          <th class="p-3 border text-center">Actions</th>
        </tr>
      </thead>
      <tbody id="productTableBody"></tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div id="pagination" class="flex justify-center space-x-2 mt-6"></div>

  <!-- Category Modal -->
  <div id="categoryModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-2xl shadow-lg w-96">
      <h2 class="text-xl font-bold mb-4">Add Category</h2>
      <form id="categoryForm" class="space-y-4">
        <!-- Auto-generated ID -->
        <div>
          <label class="block mb-1 font-medium">Category ID (Auto)</label>
          <input type="text" id="categoryId" disabled class="w-full border rounded-lg px-3 py-2 bg-gray-100" />
        </div>
        <!-- Category Name -->
        <div>
          <label class="block mb-1 font-medium">Category Name</label>
          <input type="text" id="categoryName" required class="w-full border rounded-lg px-3 py-2" />
        </div>
        <!-- Description -->
        <div>
          <label class="block mb-1 font-medium">Description</label>
          <textarea id="categoryDescription" required class="w-full border rounded-lg px-3 py-2"></textarea>
        </div>
        <!-- Buttons -->
        <div class="flex justify-end space-x-2">
          <button type="button" id="closeCategoryModal" class="border px-4 py-2 rounded-lg hover:bg-gray-100">Cancel</button>
          <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">Add</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Product Modal -->
  <div id="productModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-2xl shadow-lg w-96">
      <h2 class="text-xl font-bold mb-4">Add Product</h2>
      <form id="productForm" class="space-y-4">
        <!-- Auto-generated ID -->
        <div>
          <label class="block mb-1 font-medium">Product ID (Auto)</label>
          <input type="text" id="productId" disabled class="w-full border rounded-lg px-3 py-2 bg-gray-100" />
        </div>
        <!-- Product Name -->
        <div>
          <label class="block mb-1 font-medium">Product Name</label>
          <input type="text" id="productName" required class="w-full border rounded-lg px-3 py-2" />
        </div>
        <!-- Category -->
        <div>
          <label class="block mb-1 font-medium">Category</label>
          <select id="productCategory" required class="w-full border rounded-lg px-3 py-2"></select>
        </div>
        <!-- Buttons -->
        <div class="flex justify-end space-x-2">
          <button type="button" id="closeProductModal" class="border px-4 py-2 rounded-lg hover:bg-gray-100">Cancel</button>
          <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">Add</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // Sample product data
    let products = [
      { ProductId: 1, ProductName: "Laptop", CategoryId: 101, CategoryName: "Electronics" },
      { ProductId: 2, ProductName: "Shoes", CategoryId: 102, CategoryName: "Fashion" },
      { ProductId: 3, ProductName: "Chair", CategoryId: 103, CategoryName: "Furniture" },
      { ProductId: 4, ProductName: "Mobile", CategoryId: 101, CategoryName: "Electronics" },
      { ProductId: 5, ProductName: "T-shirt", CategoryId: 102, CategoryName: "Fashion" },
      { ProductId: 6, ProductName: "Table", CategoryId: 103, CategoryName: "Furniture" },
    ];

    // Category data
    const categories = [
      { CategoryId: 101, CategoryName: "Electronics", Description: "Electronic gadgets and devices" },
      { CategoryId: 102, CategoryName: "Fashion", Description: "Clothing and accessories" },
      { CategoryId: 103, CategoryName: "Furniture", Description: "Home and office furniture" },
    ];

    const itemsPerPage = 3;
    let currentPage = 1;
    let selectedCategory = "all";

    function renderTable() {
      const tableBody = document.getElementById("productTableBody");
      tableBody.innerHTML = "";

      // Apply filter
      const filteredProducts = selectedCategory === "all"
        ? products
        : products.filter(p => p.CategoryId == selectedCategory);

      const start = (currentPage - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      const pageItems = filteredProducts.slice(start, end);

      pageItems.forEach(item => {
        const row = document.createElement("tr");
        row.className = "hover:bg-gray-50";
        row.innerHTML = `
          <td class="p-3 border">${item.ProductId}</td>
          <td class="p-3 border">${item.ProductName}</td>
          <td class="p-3 border">${item.CategoryName}</td>
          <td class="p-3 border text-center space-x-2">
            <button onclick="editProduct(${item.ProductId})" class="bg-yellow-500 text-white px-3 py-1 rounded-lg hover:bg-yellow-600">Edit</button>
            <button onclick="deleteProduct(${item.ProductId})" class="bg-red-600 text-white px-3 py-1 rounded-lg hover:bg-red-700">Delete</button>
          </td>
        `;
        tableBody.appendChild(row);
      });

      renderPagination(filteredProducts.length);
    }

    function renderPagination(totalItems) {
      const totalPages = Math.ceil(totalItems / itemsPerPage);
      const pagination = document.getElementById("pagination");
      pagination.innerHTML = "";

      // Prev button
      const prevBtn = document.createElement("button");
      prevBtn.textContent = "Prev";
      prevBtn.className = "border px-4 py-2 rounded-xl hover:bg-gray-100";
      prevBtn.disabled = currentPage === 1;
      if (prevBtn.disabled) prevBtn.classList.add("opacity-50", "cursor-not-allowed");
      prevBtn.onclick = () => { currentPage--; renderTable(); };
      pagination.appendChild(prevBtn);

      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement("button");
        btn.textContent = i;
        btn.className =
          (i === currentPage
            ? "bg-blue-600 text-white"
            : "border hover:bg-gray-100") +
          " px-4 py-2 rounded-xl";
        btn.onclick = () => { currentPage = i; renderTable(); };
        pagination.appendChild(btn);
      }

      // Next button
      const nextBtn = document.createElement("button");
      nextBtn.textContent = "Next";
      nextBtn.className = "border px-4 py-2 rounded-xl hover:bg-gray-100";
      nextBtn.disabled = currentPage === totalPages;
      if (nextBtn.disabled) nextBtn.classList.add("opacity-50", "cursor-not-allowed");
      nextBtn.onclick = () => { currentPage++; renderTable(); };
      pagination.appendChild(nextBtn);
    }

    // Edit product
    function editProduct(id) {
      const product = products.find(p => p.ProductId === id);
      if (product) {
        const newName = prompt("Edit Product Name:", product.ProductName);
        if (newName) {
          product.ProductName = newName;
          renderTable();
        }
      }
    }

    // Delete product
    function deleteProduct(id) {
      if (confirm("Are you sure you want to delete this product?")) {
        products = products.filter(p => p.ProductId !== id);
        renderTable();
      }
    }

    // ---------------- CATEGORY MODAL ----------------
    const categoryModal = document.getElementById("categoryModal");
    document.getElementById("openCategoryModal").onclick = () => {
      const newId = categories.length ? Math.max(...categories.map(c => c.CategoryId)) + 1 : 101;
      document.getElementById("categoryId").value = newId;
      categoryModal.classList.remove("hidden");
    };
    document.getElementById("closeCategoryModal").onclick = () => categoryModal.classList.add("hidden");

    document.getElementById("categoryForm").onsubmit = (e) => {
      e.preventDefault();
      const id = parseInt(document.getElementById("categoryId").value);
      const name = document.getElementById("categoryName").value;
      const desc = document.getElementById("categoryDescription").value;

      categories.push({ CategoryId: id, CategoryName: name, Description: desc });

      // Update filter + product form category select
      updateCategoryOptions();

      alert("Category added: " + name);
      document.getElementById("categoryForm").reset();
      categoryModal.classList.add("hidden");
    };

    // ---------------- PRODUCT MODAL ----------------
    const productModal = document.getElementById("productModal");
    document.getElementById("openProductModal").onclick = () => {
      const newId = products.length ? Math.max(...products.map(p => p.ProductId)) + 1 : 1;
      document.getElementById("productId").value = newId;
      productModal.classList.remove("hidden");
    };
    document.getElementById("closeProductModal").onclick = () => productModal.classList.add("hidden");

    document.getElementById("productForm").onsubmit = (e) => {
      e.preventDefault();
      const id = parseInt(document.getElementById("productId").value);
      const name = document.getElementById("productName").value;
      const catId = parseInt(document.getElementById("productCategory").value);
      const cat = categories.find(c => c.CategoryId === catId);

      products.push({
        ProductId: id,
        ProductName: name,
        CategoryId: catId,
        CategoryName: cat.CategoryName
      });

      document.getElementById("productForm").reset();
      productModal.classList.add("hidden");
      renderTable();
    };

    // ---------------- HELPERS ----------------
    function updateCategoryOptions() {
      const filter = document.getElementById("categoryFilter");
      filter.innerHTML = `<option value="all">All Categories</option>`;
      categories.forEach(cat => {
        const option = document.createElement("option");
        option.value = cat.CategoryId;
        option.textContent = cat.CategoryName;
        filter.appendChild(option);
      });

      const select = document.getElementById("productCategory");
      select.innerHTML = "";
      categories.forEach(cat => {
        const option = document.createElement("option");
        option.value = cat.CategoryId;
        option.textContent = cat.CategoryName;
        select.appendChild(option);
      });
    }

    // Filter change event
    document.getElementById("categoryFilter").onchange = (e) => {
      selectedCategory = e.target.value;
      currentPage = 1;
      renderTable();
    };

    // Initial render
    updateCategoryOptions();
    renderTable();
  </script>
</body>
</html>
