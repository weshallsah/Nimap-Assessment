<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Server-Side Pagination</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gray-50 p-6">
    <!-- Header -->
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">Products (Server-Side)</h1>
      <div class="space-x-2">
        <button
          id="openProductModal"
          class="bg-blue-600 text-white px-4 py-2 rounded-xl hover:bg-blue-700"
        >
          Add Product
        </button>
        <button
          id="openCategoryModal"
          class="border px-4 py-2 rounded-xl hover:bg-gray-100"
        >
          Add Category
        </button>
      </div>
    </div>

    <!-- Filter -->
    <div class="mb-4">
      <label for="filterCategory" class="font-medium mr-2"
        >Filter by Category:</label
      >
      <select id="filterCategory" class="border rounded-lg px-3 py-2">
        <option value="">All</option>
      </select>
    </div>

    <!-- Table -->
    <div class="bg-white shadow-lg rounded-2xl overflow-x-auto">
      <table class="w-full border-collapse">
        <thead>
          <tr class="bg-gray-100 text-left">
            <th class="p-3 border">ProductId</th>
            <th class="p-3 border">ProductName</th>
            <th class="p-3 border">Productdescription</th>
            <th class="p-3 border">CategoryName</th>
            <th class="p-3 border">Actions</th>
          </tr>
        </thead>
        <tbody id="productTableBody"></tbody>
      </table>
    </div>

    <!-- Pagination -->
    <div id="pagination" class="flex justify-center space-x-2 mt-6"></div>

    <!-- Category Modal -->
    <div
      id="categoryModal"
      class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"
    >
      <div class="bg-white p-6 rounded-2xl shadow-lg w-96">
        <h2 class="text-xl font-bold mb-4">Add Category</h2>
        <form id="categoryForm" class="space-y-4">
          <div>
            <label class="block mb-1 font-medium">Category Name</label>
            <input
              type="text"
              id="categoryName"
              required
              class="w-full border rounded-lg px-3 py-2"
            />
          </div>
          <div>
            <label class="block mb-1 font-medium">Description</label>
            <textarea
              id="categoryDescription"
              required
              class="w-full border rounded-lg px-3 py-2"
            ></textarea>
          </div>
          <div class="flex justify-end space-x-2">
            <button
              type="button"
              id="closeCategoryModal"
              class="border px-4 py-2 rounded-lg hover:bg-gray-100"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
            >
              Add
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Product Modal -->
    <div
      id="productModal"
      class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"
    >
      <div class="bg-white p-6 rounded-2xl shadow-lg w-96">
        <h2 class="text-xl font-bold mb-4">Add Product</h2>
        <form id="productForm" class="space-y-4">
          <input type="hidden" id="editProductId" />
          <div>
            <label class="block mb-1 font-medium">Product Name</label>
            <input
              type="text"
              id="productName"
              required
              class="w-full border rounded-lg px-3 py-2"
            />
          </div>
          <div>
            <label class="block mb-1 font-medium">Product Description</label>
            <input
              type="text"
              id="productDescription"
              required
              class="w-full border rounded-lg px-3 py-2"
            />
          </div>
          <div>
            <label class="block mb-1 font-medium">Category</label>
            <select
              id="productCategory"
              required
              class="w-full border rounded-lg px-3 py-2"
            ></select>
          </div>
          <div class="flex justify-end space-x-2">
            <button
              type="button"
              id="closeProductModal"
              class="border px-4 py-2 rounded-lg hover:bg-gray-100"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
            >
              Save
            </button>
          </div>
        </form>
      </div>
    </div>

    <script>
      let currentPage = 1;
      const limit = 3;
      let hasNext = true;
      let categories = [];
      let filterCategoryId = "";

      async function fetchProducts(page = 1, categoryId = 0) {
        let url = `http://localhost:9000/api/product/list/${page}/${categoryId}`;
        if (filterCategoryId) {
          url += `?categoryId=${filterCategoryId}`;
        }
        const res = await fetch(url);
        const result = await res.json();

        const products = result.payload.List;
        hasNext = result.payload.isnext;
        renderTable(products);
        renderPagination();
      }

      async function fetchCategories() {
        const res = await fetch(`http://localhost:9000/api/category/list`);
        const result = await res.json();
        categories = result.payload.categorys;

        const productSelect = document.getElementById("productCategory");
        productSelect.innerHTML = "";
        categories.forEach((cat) => {
          const option = document.createElement("option");
          option.value = cat.id;
          option.textContent = cat.name;
          productSelect.appendChild(option);
        });

        const filterSelect = document.getElementById("filterCategory");
        filterSelect.innerHTML = '<option value="">All</option>';
        categories.forEach((cat) => {
          const option = document.createElement("option");
          option.value = cat.id;
          option.textContent = cat.name;
          filterSelect.appendChild(option);
        });
      }

      function renderTable(products) {
        const tableBody = document.getElementById("productTableBody");
        tableBody.innerHTML = "";
        products.forEach((item) => {
          console.log(item.categoryid);
          const row = document.createElement("tr");
          row.className = "hover:bg-gray-50";
          row.innerHTML = `
            <td class="p-3 border">${item.id}</td>
            <td class="p-3 border">${item.name}</td>
            <td class="p-3 border">${item.description}</td> 
            <td class="p-3 border">${item.category}</td>
            <td class="p-3 border space-x-2">
              <button class="text-blue-600 hover:underline" onclick="editProduct(${item.id}, '${item.name}', '${item.description}', '${item.categoryid}','${item.category}')">Edit</button>
              <button class="text-red-600 hover:underline" onclick="deleteProduct(${item.id})">Delete</button>
            </td>
          `;
          tableBody.appendChild(row);
        });
      }

      function renderPagination() {
        const pagination = document.getElementById("pagination");
        pagination.innerHTML = "";

        const prevBtn = document.createElement("button");
        prevBtn.textContent = "Prev";
        prevBtn.className = "border px-4 py-2 rounded-xl hover:bg-gray-100";
        prevBtn.disabled = currentPage === 1;
        if (prevBtn.disabled)
          prevBtn.classList.add("opacity-50", "cursor-not-allowed");
        prevBtn.onclick = () => {
          currentPage--;
          fetchProducts(currentPage);
        };
        pagination.appendChild(prevBtn);

        const pageLabel = document.createElement("span");
        pageLabel.textContent = `Page ${currentPage}`;
        pageLabel.className = "px-4 py-2";
        pagination.appendChild(pageLabel);

        const nextBtn = document.createElement("button");
        nextBtn.textContent = "Next";
        nextBtn.className = "border px-4 py-2 rounded-xl hover:bg-gray-100";
        nextBtn.disabled = !hasNext;
        if (nextBtn.disabled)
          nextBtn.classList.add("opacity-50", "cursor-not-allowed");
        nextBtn.onclick = () => {
          currentPage++;
          fetchProducts(currentPage);
        };
        pagination.appendChild(nextBtn);
      }

      // ---------------- EDIT PRODUCT ----------------
      function editProduct(id, name, description, categoryId, category) {
        // console.log(categoryId);
        fetchCategories();
        document.getElementById("editProductId").value = id;
        document.getElementById("productName").value = name;
        document.getElementById("productDescription").value = description;
        document.getElementById("productModal").classList.remove("hidden");
      }

      // ---------------- DELETE PRODUCT ----------------
      async function deleteProduct(id) {
        if (confirm("Are you sure you want to delete this product?")) {
          await fetch(`http://localhost:9000/api/product/delete?id=${id}`, {
            method: "DELETE",
          });
          alert("Product deleted!");
          fetchProducts(currentPage);
        }
      }

      // CATEGORY MODAL
      const categoryModal = document.getElementById("categoryModal");
      document.getElementById("openCategoryModal").onclick = () =>
        categoryModal.classList.remove("hidden");
      document.getElementById("closeCategoryModal").onclick = () =>
        categoryModal.classList.add("hidden");

      document.getElementById("categoryForm").onsubmit = async (e) => {
        e.preventDefault();
        const name = document.getElementById("categoryName").value;
        const desc = document.getElementById("categoryDescription").value;

        await fetch("http://localhost:9000/api/category/add", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ CategoryName: name, Description: desc }),
        });

        alert("Category added: " + name);
        document.getElementById("categoryForm").reset();
        categoryModal.classList.add("hidden");
        fetchCategories();
      };

      // PRODUCT MODAL
      const productModal = document.getElementById("productModal");
      document.getElementById("openProductModal").onclick = () => {
        document.getElementById("editProductId").value = "";
        document.getElementById("productForm").reset();
        fetchCategories();
        productModal.classList.remove("hidden");
      };
      document.getElementById("closeProductModal").onclick = () =>
        productModal.classList.add("hidden");

      document.getElementById("productForm").onsubmit = async (e) => {
        e.preventDefault();
        const id = document.getElementById("editProductId").value;
        const name = document.getElementById("productName").value;
        const description = document.getElementById("productDescription").value;
        const catId = parseInt(
          document.getElementById("productCategory").value
        );

        if (id) {
          // UPDATE
          await fetch(`http://localhost:9000/api/product/update/${id}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              name: name,
              categoryID: catId,
              description: description,
            }),
          });
          alert("Product updated: " + name);
        } else {
          // ADD
          await fetch("http://localhost:9000/api/product/add", {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              name: name,
              categoryID: catId,
              description: description,
            }),
          });
          alert("Product added: " + name);
        }

        document.getElementById("productForm").reset();
        productModal.classList.add("hidden");
        fetchProducts(currentPage);
      };

      document.getElementById("filterCategory").onchange = (e) => {
        filterCategoryId = e.target.value;
        currentPage = 1;
        fetchProducts(currentPage, filterCategoryId);
      };

      fetchCategories();
      fetchProducts(currentPage);
    </script>
  </body>
</html>
